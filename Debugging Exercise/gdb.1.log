Starting program: /home/shay/a/cheintze/264/hw01/prime_factor 

Program received signal SIGINT, Interrupt.
0x000000364ecdb7d0 in __write_nocancel () from /lib64/libc.so.6
Single stepping until exit from function __write_nocancel,
which has no line number information.
0x000000364ec71943 in _IO_new_file_write () from /lib64/libc.so.6
Single stepping until exit from function _IO_new_file_write,
which has no line number information.
0x000000364ec72ef5 in _IO_new_do_write () from /lib64/libc.so.6
Single stepping until exit from function _IO_new_do_write,
which has no line number information.
0x000000364ec715bd in _IO_new_file_xsputn () from /lib64/libc.so.6
Single stepping until exit from function _IO_new_file_xsputn,
which has no line number information.
0x000000364ec45018 in vfprintf () from /lib64/libc.so.6
Starting program: /home/shay/a/cheintze/264/hw01/prime_factor 

Program received signal SIGINT, Interrupt.
0x000000364ecdb7d0 in __write_nocancel () from /lib64/libc.so.6
1	/* vim: set tabstop=4 shiftwidth=4 fileencoding=utf-8 noexpandtab: */
2	#include <stdio.h>
3	#include <stdlib.h>
4	#include "prime_factor.h"
5	
6	int main(int argc, char* argv[]) {
7		print_prime_factors(6);
8		print_prime_factors(1);  // should report "(none)"
9		print_prime_factors(0);  // should report "(none)"
10		print_prime_factors(48); // 2 2 2 2 3
#0  0x000000364ecdb7d0 in __write_nocancel () from /lib64/libc.so.6
#1  0x000000364ec71943 in _IO_new_file_write () from /lib64/libc.so.6
#2  0x000000364ec72ef5 in _IO_new_do_write () from /lib64/libc.so.6
#3  0x000000364ec715bd in _IO_new_file_xsputn () from /lib64/libc.so.6
#4  0x000000364ec45018 in vfprintf () from /lib64/libc.so.6
#5  0x000000364ec4effa in printf () from /lib64/libc.so.6
#6  0x0000000000400658 in print_prime_factors (n=0) at prime_factor.c:29
#7  0x00000000004006f7 in main (argc=1, argv=0x7fffffffe398) at test_prime_factor.c:7
#0  0x000000364ecdb7d0 in __write_nocancel () from /lib64/libc.so.6
#6  0x0000000000400658 in print_prime_factors (n=0) at prime_factor.c:29
29	                printf(" %d", 2);
24	            printf(" (none)");
25	        }
26	        else {
27	            // Print all occurrences of 2 in the prime factorization
28	            while(n % 2 == 0) {
29	                printf(" %d", 2);
30	                n %= 2;  // Divide n by 2 (integer division)
31	            }
32	
33	            // Try all odd integers, from 3 to sqrt(n)
The history is empty.
No symbol "local" in current context.
No symbol "locals" in current context.
No symbol "variables" in current context.
$1 = 0
$2 = 0
No symbol "arg" in current context.
No symbol "agument" in current context.
No symbol "argument" in current context.
No symbol "arguments" in current context.
No symbol "var" in current context.
No symbol "vars" in current context.
Stack level 6, frame at 0x7fffffffe2a0:
 rip = 0x400658 in print_prime_factors (prime_factor.c:29); saved rip = 0x4006f7
 called by frame at 0x7fffffffe2c0, caller of frame at 0x7fffffffe270
 source language c.
 Arglist at 0x7fffffffe290, args: n=0
 Locals at 0x7fffffffe290, Previous frame's sp is 0x7fffffffe2a0
 Saved registers:
  rbp at 0x7fffffffe290, rip at 0x7fffffffe298
No locals.
n = 0
Breakpoint 1 at 0x4006ed: file test_prime_factor.c, line 7.
Starting program: /home/shay/a/cheintze/264/hw01/prime_factor 

Breakpoint 1, main (argc=1, argv=0x7fffffffe398) at test_prime_factor.c:7
7		print_prime_factors(6);
print_prime_factors (n=6) at prime_factor.c:17
17	    if(n <= 0) {
21	        printf("Prime factors of %d:", n);
23	        if(n == 1) {
28	            while(n % 2 == 0) {
29	                printf(" %d", 2);
30	                n %= 2;  // Divide n by 2 (integer division)
28	            while(n % 2 == 0) {
29	                printf(" %d", 2);
30	                n %= 2;  // Divide n by 2 (integer division)
28	            while(n % 2 == 0) {
29	                printf(" %d", 2);
30	                n %= 2;  // Divide n by 2 (integer division)
28	            while(n % 2 == 0) {
29	                printf(" %d", 2);
Breakpoint 2 at 0x400669: file prime_factor.c, line 28.
Continuing.

Breakpoint 2, print_prime_factors (n=0) at prime_factor.c:28
28	            while(n % 2 == 0) {
$3 = 0
$4 = 0
Undefined command: "".  Try "help".
Requires argument (checkpoint id to restart)
Starting program: /home/shay/a/cheintze/264/hw01/prime_factor 

Breakpoint 1, main (argc=1, argv=0x7fffffffe398) at test_prime_factor.c:7
7		print_prime_factors(6);
print_prime_factors (n=6) at prime_factor.c:17
17	    if(n <= 0) {
21	        printf("Prime factors of %d:", n);
23	        if(n == 1) {

Breakpoint 2, print_prime_factors (n=6) at prime_factor.c:28
28	            while(n % 2 == 0) {
29	                printf(" %d", 2);
Starting program: /home/shay/a/cheintze/264/hw01/prime_factor 

Breakpoint 1, main (argc=1, argv=0x7fffffffe398) at test_prime_factor.c:7
7		print_prime_factors(6);
print_prime_factors (n=6) at prime_factor.c:17
17	    if(n <= 0) {
21	        printf("Prime factors of %d:", n);
23	        if(n == 1) {

Breakpoint 2, print_prime_factors (n=6) at prime_factor.c:28
28	            while(n % 2 == 0) {
Continuing.

Breakpoint 2, print_prime_factors (n=0) at prime_factor.c:28
28	            while(n % 2 == 0) {
$5 = 0
Starting program: /home/shay/a/cheintze/264/hw01/prime_factor 

Breakpoint 1, main (argc=1, argv=0x7fffffffe398) at test_prime_factor.c:7
7		print_prime_factors(6);
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x00000000004006ed in main at test_prime_factor.c:7
	breakpoint already hit 1 time
2       breakpoint     keep y   0x0000000000400669 in print_prime_factors at prime_factor.c:28
Starting program: /home/shay/a/cheintze/264/hw01/prime_factor 

Breakpoint 1, main (argc=1, argv=0x7fffffffe398) at test_prime_factor.c:7
7		print_prime_factors(6);
Continuing.

Breakpoint 2, print_prime_factors (n=6) at prime_factor.c:28
28	            while(n % 2 == 0) {
$6 = 6
29	                printf(" %d", 2);
30	                n %= 2;  // Divide n by 2 (integer division)
Starting program: /home/shay/a/cheintze/264/hw01/prime_factor 

Breakpoint 1, main (argc=1, argv=0x7fffffffe398) at test_prime_factor.c:7
7		print_prime_factors(6);
Continuing.

Breakpoint 2, print_prime_factors (n=6) at prime_factor.c:28
28	            while(n % 2 == 0) {
29	                printf(" %d", 2);
Starting program: /home/shay/a/cheintze/264/hw01/prime_factor 

Breakpoint 1, main (argc=1, argv=0x7fffffffe398) at test_prime_factor.c:7
7		print_prime_factors(6);
print_prime_factors (n=6) at prime_factor.c:17
17	    if(n <= 0) {
12	|*           This is about finding bugs.             *|
13	|*                                                   *|
14	\*****************************************************/
15	
16	void print_prime_factors(int n) {
17	    if(n <= 0) {
18	        printf("Only positive numbers are supported.\n");
19	    }
20	    else {
21	        printf("Prime factors of %d:", n);
22	
23	        if(n == 1) {
24	            printf(" (none)");
25	        }
26	        else {
27	            // Print all occurrences of 2 in the prime factorization
28	            while(n % 2 == 0) {
29	                printf(" %d", 2);
30	                n %= 2;  // Divide n by 2 (integer division)
31	            }
32	
33	            // Try all odd integers, from 3 to sqrt(n)
34	            for(int i = 3; i * i < n; i += 2) {
35	
36	                // Print all occurrences of i in the prime factorization
37	                while(n % i == 0) {
38	                    printf(" %d", i);
39	                    n /= i; // Divide n by i (integer division)
40	                }
41	            }
No source file named prime_fact.c.
Note: breakpoint 2 also set at pc 0x400669.
Breakpoint 3 at 0x400669: file prime_factor.c, line 28.
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x00000000004006ed in main at test_prime_factor.c:7
	breakpoint already hit 1 time
2       breakpoint     keep y   0x0000000000400669 in print_prime_factors at prime_factor.c:28
3       breakpoint     keep y   0x0000000000400669 in print_prime_factors at prime_factor.c:28
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x00000000004006ed in main at test_prime_factor.c:7
	breakpoint already hit 1 time
2       breakpoint     keep y   0x0000000000400669 in print_prime_factors at prime_factor.c:28
3       breakpoint     keep n   0x0000000000400669 in print_prime_factors at prime_factor.c:28
Continuing.

Breakpoint 2, print_prime_factors (n=6) at prime_factor.c:28
28	            while(n % 2 == 0) {
$7 = 6
29	                printf(" %d", 2);
30	                n %= 2;  // Divide n by 2 (integer division)
Starting program: /home/shay/a/cheintze/264/hw01/prime_factor 

Breakpoint 1, main (argc=1, argv=0x7fffffffe398) at test_prime_factor.c:7
7		print_prime_factors(6);
print_prime_factors (n=6) at prime_factor.c:17
17	    if(n <= 0) {
12	|*           This is about finding bugs.             *|
13	|*                                                   *|
14	\*****************************************************/
15	
16	void print_prime_factors(int n) {
17	    if(n <= 0) {
18	        printf("Only positive numbers are supported.\n");
19	    }
20	    else {
21	        printf("Prime factors of %d:", n);
22	
23	        if(n == 1) {
24	            printf(" (none)");
25	        }
26	        else {
27	            // Print all occurrences of 2 in the prime factorization
28	            while(n % 2 == 0) {
29	                printf(" %d", 2);
30	                n %= 2;  // Divide n by 2 (integer division)
31	            }
$8 = 6
21	        printf("Prime factors of %d:", n);
23	        if(n == 1) {

Breakpoint 2, print_prime_factors (n=6) at prime_factor.c:28
28	            while(n % 2 == 0) {
$9 = 6
29	                printf(" %d", 2);
30	                n %= 2;  // Divide n by 2 (integer division)
$10 = 6
$11 = 6

Breakpoint 2, print_prime_factors (n=0) at prime_factor.c:28
28	            while(n % 2 == 0) {
$12 = 0
$13 = 0
Starting program: /home/shay/a/cheintze/264/hw01/prime_factor 

Breakpoint 1, main (argc=1, argv=0x7fffffffe398) at test_prime_factor.c:7
7		print_prime_factors(6);
print_prime_factors (n=6) at prime_factor.c:17
17	    if(n <= 0) {
Continuing.

Breakpoint 2, print_prime_factors (n=6) at prime_factor.c:28
28	            while(n % 2 == 0) {
$14 = 6
29	                printf(" %d", 2);
30	                n %= 2;  // Divide n by 2 (integer division)
$15 = 6

Breakpoint 2, print_prime_factors (n=0) at prime_factor.c:28
28	            while(n % 2 == 0) {
$16 = 0
$17 = 0
